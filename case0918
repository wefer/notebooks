{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from datetime import datetime\n",
    "import pandas as pd\n",
    "import sklearn as skl\n",
    "from matplotlib import pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Read in the data and see what it looks like"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Kundnr</th>\n",
       "      <th>Status_L</th>\n",
       "      <th>Status_A</th>\n",
       "      <th>Target_Alla</th>\n",
       "      <th>Target_Helt</th>\n",
       "      <th>Target_Delvis</th>\n",
       "      <th>Ref_Alla</th>\n",
       "      <th>Kundperiod_Min</th>\n",
       "      <th>Kundperiod_Max</th>\n",
       "      <th>Avslutsdatum_Max</th>\n",
       "      <th>...</th>\n",
       "      <th>H00_Marknadsvärde_Sum</th>\n",
       "      <th>H01_Marknadsvärde_Sum</th>\n",
       "      <th>H03_Marknadsvärde_Sum</th>\n",
       "      <th>H06_Marknadsvärde_Sum</th>\n",
       "      <th>H12_Marknadsvärde_Sum</th>\n",
       "      <th>H00_ÖverUnderVärde_Sum</th>\n",
       "      <th>H01_ÖverUnderVärde_Sum</th>\n",
       "      <th>H03_ÖverUnderVärde_Sum</th>\n",
       "      <th>H06_ÖverUnderVärde_Sum</th>\n",
       "      <th>H12_ÖverUnderVärde_Sum</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>201501</td>\n",
       "      <td>201611</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.044444</td>\n",
       "      <td>0.044444</td>\n",
       "      <td>0.044444</td>\n",
       "      <td>0.044444</td>\n",
       "      <td>368.822222</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>201501</td>\n",
       "      <td>201611</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>108777.333333</td>\n",
       "      <td>108853.888889</td>\n",
       "      <td>110165.444444</td>\n",
       "      <td>107994.777778</td>\n",
       "      <td>33774.111111</td>\n",
       "      <td>85178.111111</td>\n",
       "      <td>85239.144444</td>\n",
       "      <td>86065.235556</td>\n",
       "      <td>83954.896667</td>\n",
       "      <td>25721.618889</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>201501</td>\n",
       "      <td>201611</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.013333</td>\n",
       "      <td>0.012222</td>\n",
       "      <td>0.010000</td>\n",
       "      <td>0.007778</td>\n",
       "      <td>0.005556</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>201501</td>\n",
       "      <td>201611</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>14137.555556</td>\n",
       "      <td>13936.666667</td>\n",
       "      <td>13723.222222</td>\n",
       "      <td>13873.888889</td>\n",
       "      <td>NaN</td>\n",
       "      <td>545.064444</td>\n",
       "      <td>545.064444</td>\n",
       "      <td>572.286667</td>\n",
       "      <td>572.286667</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>201501</td>\n",
       "      <td>201611</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>511.113333</td>\n",
       "      <td>488.891111</td>\n",
       "      <td>444.446667</td>\n",
       "      <td>377.780000</td>\n",
       "      <td>244.444444</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>201501</td>\n",
       "      <td>201611</td>\n",
       "      <td>20160530.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>201501</td>\n",
       "      <td>201611</td>\n",
       "      <td>20160909.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>12480.777778</td>\n",
       "      <td>10259.333333</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2095.274444</td>\n",
       "      <td>820.947778</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>201501</td>\n",
       "      <td>201611</td>\n",
       "      <td>20160428.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1066.777778</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>859.200000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>201501</td>\n",
       "      <td>201611</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>479.777778</td>\n",
       "      <td>495.111111</td>\n",
       "      <td>517.222222</td>\n",
       "      <td>515.888889</td>\n",
       "      <td>561.555556</td>\n",
       "      <td>306.422222</td>\n",
       "      <td>318.555556</td>\n",
       "      <td>322.577778</td>\n",
       "      <td>325.766667</td>\n",
       "      <td>334.211111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>201501</td>\n",
       "      <td>201611</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>104100.000000</td>\n",
       "      <td>104100.000000</td>\n",
       "      <td>106600.000000</td>\n",
       "      <td>106600.000000</td>\n",
       "      <td>105030.000000</td>\n",
       "      <td>83280.000000</td>\n",
       "      <td>83280.000000</td>\n",
       "      <td>85280.000000</td>\n",
       "      <td>85280.000000</td>\n",
       "      <td>86480.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10 rows × 167 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Kundnr  Status_L  Status_A  Target_Alla  Target_Helt  Target_Delvis  \\\n",
       "0       1         1         0            0            0              0   \n",
       "1       2         1         0            0            0              0   \n",
       "2       3         1         0            0            0              0   \n",
       "3       4         1         0            0            0              0   \n",
       "4       5         1         0            0            0              0   \n",
       "5       6         0         1            1            1              0   \n",
       "6       7         0         1            1            1              0   \n",
       "7       8         0         1            1            1              0   \n",
       "8       9         1         0            0            0              0   \n",
       "9      10         1         0            0            0              0   \n",
       "\n",
       "   Ref_Alla  Kundperiod_Min  Kundperiod_Max  Avslutsdatum_Max  \\\n",
       "0         1          201501          201611               NaN   \n",
       "1         1          201501          201611               NaN   \n",
       "2         1          201501          201611               NaN   \n",
       "3         1          201501          201611               NaN   \n",
       "4         1          201501          201611               NaN   \n",
       "5         0          201501          201611        20160530.0   \n",
       "6         0          201501          201611        20160909.0   \n",
       "7         0          201501          201611        20160428.0   \n",
       "8         1          201501          201611               NaN   \n",
       "9         1          201501          201611               NaN   \n",
       "\n",
       "            ...           H00_Marknadsvärde_Sum H01_Marknadsvärde_Sum  \\\n",
       "0           ...                             NaN                   NaN   \n",
       "1           ...                   108777.333333         108853.888889   \n",
       "2           ...                        0.000000              0.000000   \n",
       "3           ...                    14137.555556          13936.666667   \n",
       "4           ...                             NaN                   NaN   \n",
       "5           ...                        0.000000              0.000000   \n",
       "6           ...                        0.000000              0.000000   \n",
       "7           ...                        0.000000              0.000000   \n",
       "8           ...                      479.777778            495.111111   \n",
       "9           ...                   104100.000000         104100.000000   \n",
       "\n",
       "   H03_Marknadsvärde_Sum  H06_Marknadsvärde_Sum  H12_Marknadsvärde_Sum  \\\n",
       "0                    NaN                    NaN                    NaN   \n",
       "1          110165.444444          107994.777778           33774.111111   \n",
       "2               0.000000               0.000000               0.000000   \n",
       "3           13723.222222           13873.888889                    NaN   \n",
       "4                    NaN                    NaN                    NaN   \n",
       "5               0.000000               0.000000               0.000000   \n",
       "6               0.000000           12480.777778           10259.333333   \n",
       "7               0.000000               0.000000            1066.777778   \n",
       "8             517.222222             515.888889             561.555556   \n",
       "9          106600.000000          106600.000000          105030.000000   \n",
       "\n",
       "   H00_ÖverUnderVärde_Sum  H01_ÖverUnderVärde_Sum  H03_ÖverUnderVärde_Sum  \\\n",
       "0                0.044444                0.044444                0.044444   \n",
       "1            85178.111111            85239.144444            86065.235556   \n",
       "2                0.013333                0.012222                0.010000   \n",
       "3              545.064444              545.064444              572.286667   \n",
       "4              511.113333              488.891111              444.446667   \n",
       "5                0.000000                0.000000                0.000000   \n",
       "6                0.000000                0.000000                0.000000   \n",
       "7                0.000000                0.000000                0.000000   \n",
       "8              306.422222              318.555556              322.577778   \n",
       "9            83280.000000            83280.000000            85280.000000   \n",
       "\n",
       "   H06_ÖverUnderVärde_Sum  H12_ÖverUnderVärde_Sum  \n",
       "0                0.044444              368.822222  \n",
       "1            83954.896667            25721.618889  \n",
       "2                0.007778                0.005556  \n",
       "3              572.286667                0.000000  \n",
       "4              377.780000              244.444444  \n",
       "5                0.000000                0.000000  \n",
       "6             2095.274444              820.947778  \n",
       "7                0.000000              859.200000  \n",
       "8              325.766667              334.211111  \n",
       "9            85280.000000            86480.000000  \n",
       "\n",
       "[10 rows x 167 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(\"LCI_Data_Set.txt\", sep=\"\\t\")\n",
    "df.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We want to change columns containing dates to a format we can work with"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "df[\"Avslutsdatum_Max\"] = pd.to_datetime(df[\"Avslutsdatum_Max\"], format=\"%Y%m%d\")\n",
    "df[\"Kundperiod_Min\"] = pd.to_datetime(df[\"Kundperiod_Min\"], format=\"%Y%m\")\n",
    "df[\"Kundperiod_Max\"] = pd.to_datetime(df[\"Kundperiod_Max\"], format=\"%Y%m\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Planned strategy\n",
    "- Take a closer look at the variables to see which ones are interesting to us. We want to look primarily at customer \n",
    "behavior (how active are they in terms of making transfers, logging in to their account and getting in contact with the bank)\n",
    "In addition to that, we also want to see if we can find trends in the behaviour - is the activity going up or down prior to closing and agreement?\n",
    "For this we can look at the two periods prior to the last closing.\n",
    "- Looking at external factors - we might be able to see a temporal trend among customers where we have spikes in closings.\n",
    "A possible reason for this might be a policy change made by the bank or perhaps an aggressive marketing campaign by a competitor\n",
    "- We want to see if there are some traits that distinguish customers who leave from those who stay. Since our target label is prone to change over time\n",
    "i.e a staying customer might leave the next day after our last measuring point, we should mitigate for this by perhaps at older periods of activity for these \"controls\"\n",
    "- When we have established the variables we are going to use in our initial analysis we should choose a appropriate model to start with.\n",
    "Since the problem is composed as a binary classification problem we could use something like Logistic Regression, a Support Vector Machine or decision tree model like random forest. In order to take into account for the relative small number customers who churn in respect to the ones who don't as well as for possible outliers, we ideally want to split our training set into several parts to do a five-fold cross validation of our model. (i.e traing five models on 80% of the data and taking an average of those models)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### We have many variables and it might be wise to lower the complexity by putting aside the ones we believe contribute little to customer decision\n",
    "Things that we are interested in are customer behavior, customer interaction and a change in any of those prior to closing agreements. \n",
    "In addition to that; looking at too many variables also increse the chance of finding a correlating variable simple due to the distribution of probabilities. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "customer_info_variables = [x for x in df.columns if \"Inlogg\" in x or \"Uppring\" in x]\n",
    "df = df[['Target_Alla', \n",
    "         'Target_Helt', \n",
    "         'Target_Delvis', \n",
    "         'Ref_Alla', \n",
    "         'Kundperiod_Min', \n",
    "         'Kundperiod_Max', \n",
    "         'Avslutsdatum_Max',\n",
    "         'H00_Kundsegment'] + customer_info_variables]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Since we assume that the way of logging contributes little to the tendency to close agreements, we sum them together"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "for period in ['H00', 'H01', 'H03', 'H06', 'H12']:\n",
    "    df[\"{}_Inlogg_total\".format(period)] = df['{}_Ant_Inlogg_Internetbank_Man'.format(period)] + df['{}_Ant_Inlogg_Mobilbank_Pri_Man'.format(period)] + df['{}_Ant_Inlogg_Mobilbank_Tab_Man'.format(period)]\n",
    "    \n",
    "columns_to_drop = [x for x in df.columns if \"Internetbank\" in x or \"Mobilbank\" in x]\n",
    "df = df.drop(columns=columns_to_drop)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And see how our data looks now"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Target_Alla</th>\n",
       "      <th>Target_Helt</th>\n",
       "      <th>Target_Delvis</th>\n",
       "      <th>Ref_Alla</th>\n",
       "      <th>Kundperiod_Min</th>\n",
       "      <th>Kundperiod_Max</th>\n",
       "      <th>Avslutsdatum_Max</th>\n",
       "      <th>H00_Kundsegment</th>\n",
       "      <th>H00_Ant_Uppring_Telbank_PS_Man</th>\n",
       "      <th>H01_Ant_Uppring_Telbank_PS_Man</th>\n",
       "      <th>H03_Ant_Uppring_Telbank_PS_Man</th>\n",
       "      <th>H06_Ant_Uppring_Telbank_PS_Man</th>\n",
       "      <th>H12_Ant_Uppring_Telbank_PS_Man</th>\n",
       "      <th>H00_Inlogg_total</th>\n",
       "      <th>H01_Inlogg_total</th>\n",
       "      <th>H03_Inlogg_total</th>\n",
       "      <th>H06_Inlogg_total</th>\n",
       "      <th>H12_Inlogg_total</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2015-01-01</td>\n",
       "      <td>2016-11-01</td>\n",
       "      <td>NaT</td>\n",
       "      <td>P30</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>46.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>57.0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>54.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2015-01-01</td>\n",
       "      <td>2016-11-01</td>\n",
       "      <td>NaT</td>\n",
       "      <td>P10</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>28.0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2015-01-01</td>\n",
       "      <td>2016-11-01</td>\n",
       "      <td>NaT</td>\n",
       "      <td>P40</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>33.0</td>\n",
       "      <td>32.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>34.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2015-01-01</td>\n",
       "      <td>2016-11-01</td>\n",
       "      <td>NaT</td>\n",
       "      <td>P20</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>31.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>17.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2015-01-01</td>\n",
       "      <td>2016-11-01</td>\n",
       "      <td>NaT</td>\n",
       "      <td>P30</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>6.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Target_Alla  Target_Helt  Target_Delvis  Ref_Alla Kundperiod_Min  \\\n",
       "0            0            0              0         1     2015-01-01   \n",
       "1            0            0              0         1     2015-01-01   \n",
       "2            0            0              0         1     2015-01-01   \n",
       "3            0            0              0         1     2015-01-01   \n",
       "4            0            0              0         1     2015-01-01   \n",
       "\n",
       "  Kundperiod_Max Avslutsdatum_Max H00_Kundsegment  \\\n",
       "0     2016-11-01              NaT             P30   \n",
       "1     2016-11-01              NaT             P10   \n",
       "2     2016-11-01              NaT             P40   \n",
       "3     2016-11-01              NaT             P20   \n",
       "4     2016-11-01              NaT             P30   \n",
       "\n",
       "   H00_Ant_Uppring_Telbank_PS_Man  H01_Ant_Uppring_Telbank_PS_Man  \\\n",
       "0                             0.0                             0.0   \n",
       "1                             0.0                             0.0   \n",
       "2                             1.0                             1.0   \n",
       "3                             0.0                             0.0   \n",
       "4                             0.0                             0.0   \n",
       "\n",
       "   H03_Ant_Uppring_Telbank_PS_Man  H06_Ant_Uppring_Telbank_PS_Man  \\\n",
       "0                             0.0                             0.0   \n",
       "1                             0.0                             0.0   \n",
       "2                             2.0                             2.0   \n",
       "3                             0.0                             0.0   \n",
       "4                             0.0                             0.0   \n",
       "\n",
       "   H12_Ant_Uppring_Telbank_PS_Man  H00_Inlogg_total  H01_Inlogg_total  \\\n",
       "0                             0.0              46.0              55.0   \n",
       "1                             0.0               7.0               7.0   \n",
       "2                             3.0              22.0              33.0   \n",
       "3                             0.0              31.0              26.0   \n",
       "4                             0.0               5.0              13.0   \n",
       "\n",
       "   H03_Inlogg_total  H06_Inlogg_total  H12_Inlogg_total  \n",
       "0              57.0              45.0              54.0  \n",
       "1               8.0              28.0               4.0  \n",
       "2              32.0              30.0              34.0  \n",
       "3              14.0              12.0              17.0  \n",
       "4               3.0               8.0               6.0  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Target_Alla</th>\n",
       "      <th>Target_Helt</th>\n",
       "      <th>Target_Delvis</th>\n",
       "      <th>Ref_Alla</th>\n",
       "      <th>H00_Ant_Uppring_Telbank_PS_Man</th>\n",
       "      <th>H01_Ant_Uppring_Telbank_PS_Man</th>\n",
       "      <th>H03_Ant_Uppring_Telbank_PS_Man</th>\n",
       "      <th>H06_Ant_Uppring_Telbank_PS_Man</th>\n",
       "      <th>H12_Ant_Uppring_Telbank_PS_Man</th>\n",
       "      <th>H00_Inlogg_total</th>\n",
       "      <th>H01_Inlogg_total</th>\n",
       "      <th>H03_Inlogg_total</th>\n",
       "      <th>H06_Inlogg_total</th>\n",
       "      <th>H12_Inlogg_total</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>38751.000000</td>\n",
       "      <td>38751.000000</td>\n",
       "      <td>38751.000000</td>\n",
       "      <td>38751.000000</td>\n",
       "      <td>38259.000000</td>\n",
       "      <td>38303.000000</td>\n",
       "      <td>38354.000000</td>\n",
       "      <td>38405.000000</td>\n",
       "      <td>38291.000000</td>\n",
       "      <td>38261.000000</td>\n",
       "      <td>38307.000000</td>\n",
       "      <td>38360.000000</td>\n",
       "      <td>38410.000000</td>\n",
       "      <td>38292.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.200021</td>\n",
       "      <td>0.155454</td>\n",
       "      <td>0.044567</td>\n",
       "      <td>0.799979</td>\n",
       "      <td>0.146319</td>\n",
       "      <td>0.118294</td>\n",
       "      <td>0.108150</td>\n",
       "      <td>0.099336</td>\n",
       "      <td>0.110156</td>\n",
       "      <td>35.947544</td>\n",
       "      <td>35.390686</td>\n",
       "      <td>36.719343</td>\n",
       "      <td>34.631502</td>\n",
       "      <td>32.768490</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.400021</td>\n",
       "      <td>0.362342</td>\n",
       "      <td>0.206353</td>\n",
       "      <td>0.400021</td>\n",
       "      <td>0.641070</td>\n",
       "      <td>0.537338</td>\n",
       "      <td>0.542929</td>\n",
       "      <td>0.498932</td>\n",
       "      <td>0.588196</td>\n",
       "      <td>73.823312</td>\n",
       "      <td>71.025842</td>\n",
       "      <td>77.063428</td>\n",
       "      <td>70.589360</td>\n",
       "      <td>267.905641</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>13.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>39.000000</td>\n",
       "      <td>39.000000</td>\n",
       "      <td>40.000000</td>\n",
       "      <td>39.000000</td>\n",
       "      <td>33.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>29.000000</td>\n",
       "      <td>21.000000</td>\n",
       "      <td>27.000000</td>\n",
       "      <td>33.000000</td>\n",
       "      <td>48.000000</td>\n",
       "      <td>2766.000000</td>\n",
       "      <td>3334.000000</td>\n",
       "      <td>3490.000000</td>\n",
       "      <td>2401.000000</td>\n",
       "      <td>50547.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Target_Alla   Target_Helt  Target_Delvis      Ref_Alla  \\\n",
       "count  38751.000000  38751.000000   38751.000000  38751.000000   \n",
       "mean       0.200021      0.155454       0.044567      0.799979   \n",
       "std        0.400021      0.362342       0.206353      0.400021   \n",
       "min        0.000000      0.000000       0.000000      0.000000   \n",
       "25%        0.000000      0.000000       0.000000      1.000000   \n",
       "50%        0.000000      0.000000       0.000000      1.000000   \n",
       "75%        0.000000      0.000000       0.000000      1.000000   \n",
       "max        1.000000      1.000000       1.000000      1.000000   \n",
       "\n",
       "       H00_Ant_Uppring_Telbank_PS_Man  H01_Ant_Uppring_Telbank_PS_Man  \\\n",
       "count                    38259.000000                    38303.000000   \n",
       "mean                         0.146319                        0.118294   \n",
       "std                          0.641070                        0.537338   \n",
       "min                          0.000000                        0.000000   \n",
       "25%                          0.000000                        0.000000   \n",
       "50%                          0.000000                        0.000000   \n",
       "75%                          0.000000                        0.000000   \n",
       "max                         29.000000                       21.000000   \n",
       "\n",
       "       H03_Ant_Uppring_Telbank_PS_Man  H06_Ant_Uppring_Telbank_PS_Man  \\\n",
       "count                    38354.000000                    38405.000000   \n",
       "mean                         0.108150                        0.099336   \n",
       "std                          0.542929                        0.498932   \n",
       "min                          0.000000                        0.000000   \n",
       "25%                          0.000000                        0.000000   \n",
       "50%                          0.000000                        0.000000   \n",
       "75%                          0.000000                        0.000000   \n",
       "max                         27.000000                       33.000000   \n",
       "\n",
       "       H12_Ant_Uppring_Telbank_PS_Man  H00_Inlogg_total  H01_Inlogg_total  \\\n",
       "count                    38291.000000      38261.000000      38307.000000   \n",
       "mean                         0.110156         35.947544         35.390686   \n",
       "std                          0.588196         73.823312         71.025842   \n",
       "min                          0.000000          0.000000          0.000000   \n",
       "25%                          0.000000          4.000000          4.000000   \n",
       "50%                          0.000000         15.000000         15.000000   \n",
       "75%                          0.000000         39.000000         39.000000   \n",
       "max                         48.000000       2766.000000       3334.000000   \n",
       "\n",
       "       H03_Inlogg_total  H06_Inlogg_total  H12_Inlogg_total  \n",
       "count      38360.000000      38410.000000      38292.000000  \n",
       "mean          36.719343         34.631502         32.768490  \n",
       "std           77.063428         70.589360        267.905641  \n",
       "min            0.000000          0.000000          0.000000  \n",
       "25%            4.000000          4.000000          4.000000  \n",
       "50%           15.000000         14.000000         13.000000  \n",
       "75%           40.000000         39.000000         33.000000  \n",
       "max         3490.000000       2401.000000      50547.000000  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Create subsets dataframes for target and reference clients and fill missing values with zeros.\n",
    "Filling missing values is not always straightforward and might introduce unbalanced data. Since the values we are filling are postive discrete counts of interactions where the mean is around 35, filling these with zeros can be considered reasonably safe."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_target_all = df[df[\"Target_Alla\"]==1].fillna(value=0)\n",
    "df_target_full = df[df[\"Target_Helt\"]==1].fillna(value=0)\n",
    "df_target_part = df[df[\"Target_Delvis\"]==1].fillna(value=0)\n",
    "df_ref_all = df[df[\"Ref_Alla\"]==1].fillna(value=0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Sanity check that the numbers add up"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(df_target_all) == len(df_target_part) + len(df_target_full)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Let's see if there is a temporal aspect first of all\n",
    "If we see any spikes in closing of agreements we can look closer into that time period "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x9d873c8>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x5806550>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_target_all[\"Avslutsdatum_Max\"].dt.month.value_counts().sort_index().plot(kind=\"line\", \n",
    "                                                                             ylim={0, 1000}, \n",
    "                                                                             figsize=(16, 4),\n",
    "                                                                            xticks=range(1,13),\n",
    "                                                                            title=\"Closings per month 2016\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Nothing stands out as extraoridniary except the fact that we have somewhat higher churn in January. This could however be and artifact due to some contracts end automatically at the end of a year for example"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### To see trends in customer behavior we need to find out which periods corresponds to those prior to a closing\n",
    "Instead of looking at all previous period, we will focus at the two previous periods of activity before closing an agreement since we consider them to be most interesting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_last_two_active_periods(month):\n",
    "    if month > 10:\n",
    "        return (\"H00\", \"H01\")\n",
    "    elif  10 <= month > 8:\n",
    "        return (\"H01\", \"H03\")\n",
    "    elif 8 >= month >5:\n",
    "        return (\"H03\", \"H06\")\n",
    "    else:\n",
    "        return (\"H06\", \"H12\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "closing_months = df_target_all[\"Avslutsdatum_Max\"].dt.month"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "rows = [row for index, row in df_target_all.iterrows()]\n",
    "\n",
    "last_period_logins = [\"{}_Inlogg_total\".format(get_last_two_active_periods(x)[0]) for x in closing_months]\n",
    "second_last_period_logins = [\"{}_Inlogg_total\".format(get_last_two_active_periods(x)[1]) for x in closing_months]\n",
    "df_target_all.loc[:,\"num_login_last\"] = pd.Series([row[col] for row, col in zip(rows, last_period_logins)], index=df_target_all.index)\n",
    "df_target_all.loc[:,\"num_login_second_last\"] = pd.Series([row[col] for row, col in zip(rows, second_last_period_logins)], index=df_target_all.index)\n",
    "df_target_all[\"delta_login_activity\"] = (df_target_all[\"num_login_last\"] - df_target_all[\"num_login_second_last\"])\n",
    "\n",
    "last_period_calls = [\"{}_Ant_Uppring_Telbank_PS_Man\".format(get_last_two_active_periods(x)[0]) for x in closing_months]\n",
    "second_last_period_calls = [\"{}_Ant_Uppring_Telbank_PS_Man\".format(get_last_two_active_periods(x)[1]) for x in closing_months]\n",
    "df_target_all.loc[:,\"num_calls_last\"] = pd.Series([row[col] for row, col in zip(rows, last_period_calls)], index=df_target_all.index)\n",
    "df_target_all.loc[:,\"num_calls_second_last\"] = pd.Series([row[col] for row, col in zip(rows, second_last_period_calls)], index=df_target_all.index)\n",
    "df_target_all[\"delta_calls_activity\"] = (df_target_all[\"num_calls_last\"] - df_target_all[\"num_calls_second_last\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we have thee extra columns for each activity type:\n",
    "    - Number of interactions for their last period\n",
    "    - Numner of interactions for their second to last period\n",
    "    - The difference in activity (delta) between them both"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Target_Alla</th>\n",
       "      <th>Target_Helt</th>\n",
       "      <th>Target_Delvis</th>\n",
       "      <th>Ref_Alla</th>\n",
       "      <th>Kundperiod_Min</th>\n",
       "      <th>Kundperiod_Max</th>\n",
       "      <th>Avslutsdatum_Max</th>\n",
       "      <th>H00_Kundsegment</th>\n",
       "      <th>H00_Ant_Uppring_Telbank_PS_Man</th>\n",
       "      <th>H01_Ant_Uppring_Telbank_PS_Man</th>\n",
       "      <th>...</th>\n",
       "      <th>H06_Inlogg_total</th>\n",
       "      <th>H12_Inlogg_total</th>\n",
       "      <th>num_login_last</th>\n",
       "      <th>num_login_second_last</th>\n",
       "      <th>delta_login_activity</th>\n",
       "      <th>num_calls_last</th>\n",
       "      <th>num_calls_second_last</th>\n",
       "      <th>delta_calls_activity</th>\n",
       "      <th>delta_calls_normalized</th>\n",
       "      <th>delta_login_normalized</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2015-01-01</td>\n",
       "      <td>2016-11-01</td>\n",
       "      <td>2016-05-30</td>\n",
       "      <td>P20</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>6.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2015-01-01</td>\n",
       "      <td>2016-11-01</td>\n",
       "      <td>2016-09-09</td>\n",
       "      <td>CMI</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>101.0</td>\n",
       "      <td>117.0</td>\n",
       "      <td>101.0</td>\n",
       "      <td>117.0</td>\n",
       "      <td>-16.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2015-01-01</td>\n",
       "      <td>2016-11-01</td>\n",
       "      <td>2016-04-28</td>\n",
       "      <td>P20</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>20.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2015-01-01</td>\n",
       "      <td>2016-02-01</td>\n",
       "      <td>2016-09-02</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>-3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2015-01-01</td>\n",
       "      <td>2016-11-01</td>\n",
       "      <td>2016-07-11</td>\n",
       "      <td>P50</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>4.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 26 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    Target_Alla  Target_Helt  Target_Delvis  Ref_Alla Kundperiod_Min  \\\n",
       "5             1            1              0         0     2015-01-01   \n",
       "6             1            1              0         0     2015-01-01   \n",
       "7             1            1              0         0     2015-01-01   \n",
       "12            1            1              0         0     2015-01-01   \n",
       "14            1            1              0         0     2015-01-01   \n",
       "\n",
       "   Kundperiod_Max Avslutsdatum_Max H00_Kundsegment  \\\n",
       "5      2016-11-01       2016-05-30             P20   \n",
       "6      2016-11-01       2016-09-09             CMI   \n",
       "7      2016-11-01       2016-04-28             P20   \n",
       "12     2016-02-01       2016-09-02               0   \n",
       "14     2016-11-01       2016-07-11             P50   \n",
       "\n",
       "    H00_Ant_Uppring_Telbank_PS_Man  H01_Ant_Uppring_Telbank_PS_Man  \\\n",
       "5                              3.0                             0.0   \n",
       "6                              0.0                             1.0   \n",
       "7                              0.0                             0.0   \n",
       "12                             0.0                             0.0   \n",
       "14                             0.0                             0.0   \n",
       "\n",
       "             ...            H06_Inlogg_total  H12_Inlogg_total  \\\n",
       "5            ...                         6.0               6.0   \n",
       "6            ...                       101.0             117.0   \n",
       "7            ...                        20.0              16.0   \n",
       "12           ...                         0.0               3.0   \n",
       "14           ...                         4.0               5.0   \n",
       "\n",
       "    num_login_last  num_login_second_last  delta_login_activity  \\\n",
       "5              6.0                    6.0                   0.0   \n",
       "6            101.0                  117.0                 -16.0   \n",
       "7             20.0                   16.0                   4.0   \n",
       "12             0.0                    3.0                  -3.0   \n",
       "14             5.0                    4.0                   1.0   \n",
       "\n",
       "    num_calls_last  num_calls_second_last  delta_calls_activity  \\\n",
       "5              0.0                    0.0                   0.0   \n",
       "6              2.0                    0.0                   2.0   \n",
       "7              0.0                    0.0                   0.0   \n",
       "12             0.0                    0.0                   0.0   \n",
       "14             1.0                    0.0                   1.0   \n",
       "\n",
       "    delta_calls_normalized  delta_login_normalized  \n",
       "5                      0.0                    -1.0  \n",
       "6                      1.0                    -1.0  \n",
       "7                      0.0                     0.0  \n",
       "12                     0.0                    -1.0  \n",
       "14                     1.0                     0.0  \n",
       "\n",
       "[5 rows x 26 columns]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_target_all.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To make the delta activity column more useful, we want to normalize the values by dividing them by the number of interations for the second to last period\n",
    "Where the latter value is zero and the delta above zero, we consider that to be and 100% increase (i.e 1)\n",
    "Where delta is zero and the value for second to last period is above zero we set consider that valuea to be -100%"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_target_all['delta_calls_normalized'] = [1.0 if x!=0 and y==0 else -1.0 if x==0 and y!=0 else 0 if x==0 and y==0 else x//y for x,y in zip(df_target_all['delta_calls_activity'], df_target_all['num_calls_second_last'])]\n",
    "df_target_all['delta_login_normalized'] = [1.0 if x!=0 and y==0 else -1.0 if x==0 and y!=0 else 0 if x==0 and y==0 else x//y for x,y in zip(df_target_all['delta_login_activity'], df_target_all['num_login_second_last'])]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Target_Alla</th>\n",
       "      <th>Target_Helt</th>\n",
       "      <th>Target_Delvis</th>\n",
       "      <th>Ref_Alla</th>\n",
       "      <th>Kundperiod_Min</th>\n",
       "      <th>Kundperiod_Max</th>\n",
       "      <th>Avslutsdatum_Max</th>\n",
       "      <th>H00_Kundsegment</th>\n",
       "      <th>H00_Ant_Uppring_Telbank_PS_Man</th>\n",
       "      <th>H01_Ant_Uppring_Telbank_PS_Man</th>\n",
       "      <th>...</th>\n",
       "      <th>H06_Inlogg_total</th>\n",
       "      <th>H12_Inlogg_total</th>\n",
       "      <th>num_login_last</th>\n",
       "      <th>num_login_second_last</th>\n",
       "      <th>delta_login_activity</th>\n",
       "      <th>num_calls_last</th>\n",
       "      <th>num_calls_second_last</th>\n",
       "      <th>delta_calls_activity</th>\n",
       "      <th>delta_calls_normalized</th>\n",
       "      <th>delta_login_normalized</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2015-01-01</td>\n",
       "      <td>2016-11-01</td>\n",
       "      <td>2016-05-30</td>\n",
       "      <td>P20</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>6.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2015-01-01</td>\n",
       "      <td>2016-11-01</td>\n",
       "      <td>2016-09-09</td>\n",
       "      <td>CMI</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>101.0</td>\n",
       "      <td>117.0</td>\n",
       "      <td>101.0</td>\n",
       "      <td>117.0</td>\n",
       "      <td>-16.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2015-01-01</td>\n",
       "      <td>2016-11-01</td>\n",
       "      <td>2016-04-28</td>\n",
       "      <td>P20</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>20.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2015-01-01</td>\n",
       "      <td>2016-02-01</td>\n",
       "      <td>2016-09-02</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>-3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2015-01-01</td>\n",
       "      <td>2016-11-01</td>\n",
       "      <td>2016-07-11</td>\n",
       "      <td>P50</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>4.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 26 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    Target_Alla  Target_Helt  Target_Delvis  Ref_Alla Kundperiod_Min  \\\n",
       "5             1            1              0         0     2015-01-01   \n",
       "6             1            1              0         0     2015-01-01   \n",
       "7             1            1              0         0     2015-01-01   \n",
       "12            1            1              0         0     2015-01-01   \n",
       "14            1            1              0         0     2015-01-01   \n",
       "\n",
       "   Kundperiod_Max Avslutsdatum_Max H00_Kundsegment  \\\n",
       "5      2016-11-01       2016-05-30             P20   \n",
       "6      2016-11-01       2016-09-09             CMI   \n",
       "7      2016-11-01       2016-04-28             P20   \n",
       "12     2016-02-01       2016-09-02               0   \n",
       "14     2016-11-01       2016-07-11             P50   \n",
       "\n",
       "    H00_Ant_Uppring_Telbank_PS_Man  H01_Ant_Uppring_Telbank_PS_Man  \\\n",
       "5                              3.0                             0.0   \n",
       "6                              0.0                             1.0   \n",
       "7                              0.0                             0.0   \n",
       "12                             0.0                             0.0   \n",
       "14                             0.0                             0.0   \n",
       "\n",
       "             ...            H06_Inlogg_total  H12_Inlogg_total  \\\n",
       "5            ...                         6.0               6.0   \n",
       "6            ...                       101.0             117.0   \n",
       "7            ...                        20.0              16.0   \n",
       "12           ...                         0.0               3.0   \n",
       "14           ...                         4.0               5.0   \n",
       "\n",
       "    num_login_last  num_login_second_last  delta_login_activity  \\\n",
       "5              6.0                    6.0                   0.0   \n",
       "6            101.0                  117.0                 -16.0   \n",
       "7             20.0                   16.0                   4.0   \n",
       "12             0.0                    3.0                  -3.0   \n",
       "14             5.0                    4.0                   1.0   \n",
       "\n",
       "    num_calls_last  num_calls_second_last  delta_calls_activity  \\\n",
       "5              0.0                    0.0                   0.0   \n",
       "6              2.0                    0.0                   2.0   \n",
       "7              0.0                    0.0                   0.0   \n",
       "12             0.0                    0.0                   0.0   \n",
       "14             1.0                    0.0                   1.0   \n",
       "\n",
       "    delta_calls_normalized  delta_login_normalized  \n",
       "5                      0.0                    -1.0  \n",
       "6                      1.0                    -1.0  \n",
       "7                      0.0                     0.0  \n",
       "12                     0.0                    -1.0  \n",
       "14                     1.0                     0.0  \n",
       "\n",
       "[5 rows x 26 columns]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_target_all.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "More calls: 7.39%\n",
      "Less calls: 8.3%\n",
      "More logins: 15.3%\n",
      "Less logins: 42.3%\n"
     ]
    }
   ],
   "source": [
    "total_number_targets = len(df_target_all)\n",
    "percent_more_calls = len(df_target_all[df_target_all['delta_calls_normalized'] > 0]) / total_number_targets * 100\n",
    "percent_less_calls = len(df_target_all[df_target_all['delta_calls_normalized'] < 0]) / total_number_targets * 100\n",
    "print(\"More calls: {0:.3}%\".format(percent_more_calls))\n",
    "print(\"Less calls: {0:.3}%\".format(percent_less_calls))\n",
    "\n",
    "percent_more_logins = len(df_target_all[df_target_all['delta_login_normalized'] > 0]) / total_number_targets * 100\n",
    "percent_less_logins = len(df_target_all[df_target_all['delta_login_normalized'] < 0]) / total_number_targets * 100\n",
    "print(\"More logins: {0:.3}%\".format(percent_more_logins))\n",
    "print(\"Less logins: {0:.3}%\".format(percent_less_logins))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This is still a crude measure but the login activity might hint to something"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "35392"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(df[[x in [\"P10\",\"P20\",\"P30\",\"P40\",\"P50\",\"P60\",\"P70\",\"P80\",] for x in df[\"H00_Kundsegment\"].replace(0.0, 'X')]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
